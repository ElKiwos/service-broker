/* Copyright (C) Couchbase, Inc 2020 - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/couchbase/service-broker/pkg/apis/broker.couchbase.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CouchbaseServiceBrokerConfigLister helps list CouchbaseServiceBrokerConfigs.
type CouchbaseServiceBrokerConfigLister interface {
	// List lists all CouchbaseServiceBrokerConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CouchbaseServiceBrokerConfig, err error)
	// CouchbaseServiceBrokerConfigs returns an object that can list and get CouchbaseServiceBrokerConfigs.
	CouchbaseServiceBrokerConfigs(namespace string) CouchbaseServiceBrokerConfigNamespaceLister
	CouchbaseServiceBrokerConfigListerExpansion
}

// couchbaseServiceBrokerConfigLister implements the CouchbaseServiceBrokerConfigLister interface.
type couchbaseServiceBrokerConfigLister struct {
	indexer cache.Indexer
}

// NewCouchbaseServiceBrokerConfigLister returns a new CouchbaseServiceBrokerConfigLister.
func NewCouchbaseServiceBrokerConfigLister(indexer cache.Indexer) CouchbaseServiceBrokerConfigLister {
	return &couchbaseServiceBrokerConfigLister{indexer: indexer}
}

// List lists all CouchbaseServiceBrokerConfigs in the indexer.
func (s *couchbaseServiceBrokerConfigLister) List(selector labels.Selector) (ret []*v1alpha1.CouchbaseServiceBrokerConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CouchbaseServiceBrokerConfig))
	})
	return ret, err
}

// CouchbaseServiceBrokerConfigs returns an object that can list and get CouchbaseServiceBrokerConfigs.
func (s *couchbaseServiceBrokerConfigLister) CouchbaseServiceBrokerConfigs(namespace string) CouchbaseServiceBrokerConfigNamespaceLister {
	return couchbaseServiceBrokerConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CouchbaseServiceBrokerConfigNamespaceLister helps list and get CouchbaseServiceBrokerConfigs.
type CouchbaseServiceBrokerConfigNamespaceLister interface {
	// List lists all CouchbaseServiceBrokerConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CouchbaseServiceBrokerConfig, err error)
	// Get retrieves the CouchbaseServiceBrokerConfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CouchbaseServiceBrokerConfig, error)
	CouchbaseServiceBrokerConfigNamespaceListerExpansion
}

// couchbaseServiceBrokerConfigNamespaceLister implements the CouchbaseServiceBrokerConfigNamespaceLister
// interface.
type couchbaseServiceBrokerConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CouchbaseServiceBrokerConfigs in the indexer for a given namespace.
func (s couchbaseServiceBrokerConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CouchbaseServiceBrokerConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CouchbaseServiceBrokerConfig))
	})
	return ret, err
}

// Get retrieves the CouchbaseServiceBrokerConfig from the indexer for a given namespace and name.
func (s couchbaseServiceBrokerConfigNamespaceLister) Get(name string) (*v1alpha1.CouchbaseServiceBrokerConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("couchbaseservicebrokerconfig"), name)
	}
	return obj.(*v1alpha1.CouchbaseServiceBrokerConfig), nil
}
