# Broker runs under a service account to inherit roles.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: couchbase-service-broker
---
# Broker requires roles to perform certain tasks.
# The Broker requires at least permission to get its configuration file.
# The Broker requires permission to create/delete any resource defined
# as a template, as well as any permission granted with templated roles
# or cluster roles.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: couchbase-service-broker
rules:
- apiGroups:
  - broker.couchbase.com
  resources:
  - couchbaseservicebrokerconfigs
  verbs:
  - list
  - watch
- apiGroups:
  - couchbase.com
  resources:
  - couchbaseclusters
  - couchbasebuckets
  - couchbaseephemeralbuckets
  - couchbasememcachedbuckets
  - couchbasereplications
  - couchbaseusers
  - couchbasegroups
  - couchbaseroles
  - couchbaserolebindings
  - couchbasebackups
  - couchbasebackuprestores
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - secrets
  - nodes
  - pods
  - pods/exec
  - services
  - persistentvolumeclaims
  - secrets
  - serviceaccounts
  - configmaps
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  - clusterroles
  - clusterrolebindings
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - "*"
---
# Broker requires its role to be bound to its service account.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: couchbase-service-broker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: couchbase-service-broker
subjects:
- kind: ServiceAccount
  name: couchbase-service-broker
  namespace: default
---
# Broker requires TLS support to enable end-to-end encryption.
# This protects any sensitive parameters communicated to and from
# the API.  It also uses bearer tokens to protect the API from
# malicious use.
apiVersion: v1
kind: Secret
metadata:
  name: couchbase-service-broker
data:
  token: VDBwNWVDcjNU
  tls-certificate: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURyVENDQXBXZ0F3SUJBZ0lSQUtseDNybHN1KzA2bzZtbGxWSkV5NWN3RFFZSktvWklodmNOQVFFTEJRQXcKSmpFa01DSUdBMVVFQXd3YlEyOTFZMmhpWVhObElGTmxjblpwWTJVZ1FuSnZhMlZ5SUVOQk1CNFhEVEU1TURNeApPREV3TlRNMU1Gb1hEVEl5TURNd01qRXdOVE0xTUZvd0l6RWhNQjhHQTFVRUF3d1lZMjkxWTJoaVlYTmxMWE5sCmNuWnBZMlV0WW5KdmEyVnlNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTFpbTgKZmNqY1cvb3dTMDdyRmVOVFhHYUxXRFhnMzdkYXA5L0RQcjk4M1J1V0k5SE5XbmVFSnk4VE9NNElab1N4YmVsSgprbTVleGF6eGt1RHpjTW8ranFyZFRFdzNEcFNzR3QzN3Voc2ErWVM2TUNjM28rV0xvQXhhSnNwdCtTdGFkNjU3CjIwTnB5bTY3RXBzUC9EdzhJZ1RVTzlJcXRKdjM5ekl2dWhBZ3RQSHY2SVp6enF0aVdPNDg1N2lrQVdLMkVwQlgKZXR5Qnh0TEZ2Y2FGWW13RjJtVXZsbnhJditHekdBaTVDT3JwZmM4S1hDT0V2TVlVMTVmZUNkdkhjMG84RitzcQpzdkU2SUxKeFBsVGp1YnZPanNhNkgxbzh0NXYxUXVqeDRML3pqc0laZ2JDNXJCT1UyeEdKT1ZGWnBhU2NZb21GCmN3RU0xRFA0MjVpQ3IzOW05d0lEQVFBQm80SFlNSUhWTUFrR0ExVWRFd1FDTUFBd0hRWURWUjBPQkJZRUZOUEYKMkYrY2Q3NjNUMTNSclAza2paQTlLSUw4TUZZR0ExVWRJd1JQTUUyQUZQL2ZtQTV0MnNGVW90OEpjRjY1RGRrZwpGbHJob1Nxa0tEQW1NU1F3SWdZRFZRUUREQnREYjNWamFHSmhjMlVnVTJWeWRtbGpaU0JDY205clpYSWdRMEdDCkNRQ0l2UXNmcHhKb2hqQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBVEFMQmdOVkhROEVCQU1DQmFBd0x3WUQKVlIwUkJDZ3dKb0lrWTI5MVkyaGlZWE5sTFhObGNuWnBZMlV0WW5KdmEyVnlMbVJsWm1GMWJIUXVjM1pqTUEwRwpDU3FHU0liM0RRRUJDd1VBQTRJQkFRQXNVU3lNWldYcjJHOURBY2tseUdqZFBLTm8yM1B5cHFnTzVSTjcxeWdHCmREOVRVRzdFaTM5WFVDajU4aWI2anVRZGthNzBKVU9zTWtLU2N3bS9mU2NVUG1zMEJKRTBKbjBOZ3E3RDhrbC8KYWRwdE8wVk0xQzNKR3cvQ3orRGtqeHQ2MndUMjNXako5TkNObEJTcjdOZFNyMXdYZGtsTEhkZTNSTS9EM3FQYwpFM3ZuSWJQZzlScy8veXNZWFBXYzRtSU11eUNrUjMvSnpxNGZnQmZ6cW8vRmxEdGJDZm1uUlNDbVdjaXZTSVVPCmRvcy92M3R6RTlsMVptMDUyUXVBTmxReFJocHFRQzRNajkzQXVMVWxSR2ZwcC9PRTVoR0FFUkptcGVZdTRtNSsKQXdZeW85M1VqM1paSVBWZEpjSXY3Mi9OUXpQeFUyM2paL1lpd1VzSTNiNmkKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls-private-key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRFdLYng5eU54YitqQkwKVHVzVjQxTmNab3RZTmVEZnQxcW4zOE0rdjN6ZEc1WWowYzFhZDRRbkx4TTR6Z2htaExGdDZVbVNibDdGclBHUwo0UE53eWo2T3F0MU1URGNPbEt3YTNmdTZHeHI1aExvd0p6ZWo1WXVnREZvbXltMzVLMXAzcm52YlEybkticnNTCm13LzhQRHdpQk5RNzBpcTBtL2YzTWkrNkVDQzA4ZS9vaG5QT3EySlk3anpudUtRQllyWVNrRmQ2M0lIRzBzVzkKeG9WaWJBWGFaUytXZkVpLzRiTVlDTGtJNnVsOXp3cGNJNFM4eGhUWGw5NEoyOGR6U2p3WDZ5cXk4VG9nc25FKwpWT081dTg2T3hyb2ZXankzbS9WQzZQSGd2L09Pd2htQnNMbXNFNVRiRVlrNVVWbWxwSnhpaVlWekFRelVNL2piCm1JS3ZmMmIzQWdNQkFBRUNnZ0VBUEg5RHVNQ1J4d1d3dU1WTlVUeUxJdEh3MFBVL1ZkTUVyK0ZjMVEvZ3BORVQKSTRFem9qZWF4RHJmRWkvWlhhUmtQcWtrMkZHSFFnM3RtOUVoMDUyOStDMDZJRUJ6V1JJVVgrNlBHbTVudTA2TQpEZWcySm4xRWFPeTBWcnJlUUFISUo0REppaEhNQTV3dUNqNTFVSXB2YmlpeEQwajZPVlRKd2pHU0c5eE1jUEJXClQ1UEN1TkFXZzVpa3dKU0tPcXYxTXkvVnByOFdOZU5GN3drTmZCMzZlLzUrMlBBcURLdGlXZXh2dzJrOTg2Z2gKMjFRUlBET01vK0d3cmFkNElZK3J0ZzhvQko0TUxOWm9tVWdPanNTRDdxMGlrQ25IeHZDZ3hMcGVBNGxHUHdFOApUU1dsckQ2NGxMZVg4WkRzOHoyNzhJUnZkYnp4bTVHdzQvcmE5cjlqWVFLQmdRRC9JU0pJdWVpbVZLQXVxMnMyCndRTVFWSk1XVi9SS0JUdEdOMVdyMEpyYUQxRUhrUjd4MFpyODdVLzA1NXg5VVNzbEYyWkg5ZWVmc3BCTDloU0sKSktaMzNMQloxV2htQUY3Qk9wSUVJRWFFeG9QZ1lKUTVqWWM1UDR2THNYZGdubmZYbWdFSStLWm5EVzBHV1VQTwpQcjg4L0lsa1kxSUZseEs4QnNXMGxKOGprUUtCZ1FEVzVORUlid2lGTy9KMERJV3lMb1RZeXljMkVObm9Bb0lVCnN0dGY0VG0rclF0Wm1rUUJzays5dG5pL0N5QSsxVmVWdkpNakJuQ1lhZ3FKTWVGTGJON24xNjdWTHRDMXhtK2cKenR3T2djRjRzc3lJcXJSQ0JGMjVLTjBsVkNVdzJoYmFwU2p3RElzVDVheHBhbG1KYUl2QUJwOXQ3ZXgyT3VLegpWRDFCTnp1T0J3S0JnQm8wQWZ4c002dlpwellEM3hnWmpNSUJuYlcreE5WUllqd2M5TXlYdVQvS01PMVJCMWVZCnlvMU5wbGVsN2htazI0U011YkdNWFFTMjUwRVYvaGdPR1piWDhMalpSVWFzcFE2OWdEK3lQT3ZvSTZWSTVoQmYKSzlOQ1pvNCtKTitraHZSNjJiNWRJMklVSysxcC81L1FLLzRNaGVQc200RDllaXdibWZTcEN3c3hBb0dCQUl0SQp1Q3dOTzZxUDFuQmRoWEtlTUVFTVBCZ1JDQXdYUkJVQ2NLcE9vMHp4Z0QvTmUzTFdEbFZhcGh5OXEyTE9pUHhtCnc3K1o5dlR6Rm0waVJYTEwyQmJSZDJKNSs1RTJVemdabkF4VEVnR1hjbmJLbmhlRUdQTmdoeVlneWhKRjZUWkMKZ3F4RWxRaUtmeHU4Y05oZFNPZG40NEl2Q21yL2M5emtKdWZVVXVlVkFvR0JBTmVUdUdPbkM5dXc0RnZYOE1NOQpjejQyUHlkQTFWQjM0QWpFTVpKejMzeTZQb25KZGJUdmNQT2xBZ2Nzd3NXWVdXSE51UjRwSWNLcVBuVDVuR0RXCkxJb2FoYk13WDgyK1VFMVBCUk1tL09rNkxBQ0x2SjYxU3BLM3l6dzhxUGNla09ZaGJpTXBNWk1PVkhXbVVCVXcKOUFrOFlhdUlhb0MrcGErMnBBSnlEQ2FUCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
---
# The main Broker configuration.  This defines what classes and plans a client
# can see, along with what can be configured.  Templates are bound to a plan and
# are rendered and created when a service instance/binding is created, then cleaned
# up when deleted.
apiVersion: broker.couchbase.com/v1
kind: CouchbaseServiceBrokerConfig
metadata:
  name: couchbase-service-broker
spec:
  # Catalog is simply verbatim what will be exposed on GET /v2/catalog
  catalog:
    services:
    - id: 8522e991-07bc-4225-a859-1eec1e333153
      name: couchbase-developer
      description: Couchbase Server developer deployments
      tags:
      - database
      - nosql
      bindable: true
      instances_retrievable: true
      bindings_retrievable: true
      plan_updatable: true
      plans:
      - id: ec0f2c9b-0277-46d7-985f-ba1fbf3b068d
        name: couchbase-developer-private
        description: Cluster accessible within the Kubernetes cluster
        schemas:
          service_instance:
            create:
              parameters:
                $schema: "http://json-schema.org/draft-04/schema#"
                type: object
                required:
                  - password
                properties:
                  password:
                    description: "Administrator password"
                    type: string
                  size:
                    description: "Cluster size"
                    type: number
                    minimum: 3
                    maximum: 9
            update:
              parameters:
                $schema: "http://json-schema.org/draft-04/schema#"
                type: object
                properties:
                  size:
                    description: "Cluster size"
                    type: number
                    minimum: 3
                    maximum: 9
  # Templates allow the end user to define anything they want to be created.
  # The parameters if specified define where the source is, either requesst
  # metadata or parameters.  Parameters allow defaults to be specified if
  # the parameter is not defined.  Parameters are applied to the resource one
  # or many times as required.
  templates:
  - name: couchbase-operator-serviceaccount
    singleton: true
    template:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: couchbase-operator
  - name: couchbase-operator-role
    singleton: true
    template:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        creationTimestamp: null
        name: couchbase-operator
      rules:
      - apiGroups:
        - batch
        resources:
        - jobs
        - cronjobs
        verbs:
        - list
        - watch
        - create
        - update
      - apiGroups:
        - couchbase.com
        resources:
        - couchbaseclusters
        verbs:
        - get
        - list
        - watch
        - update
      - apiGroups:
        - couchbase.com
        resources:
        - couchbasebuckets
        - couchbaseephemeralbuckets
        - couchbasememcachedbuckets
        - couchbasereplications
        - couchbaseusers
        - couchbasegroups
        - couchbaseroles
        - couchbaserolebindings
        - couchbasebackups
        verbs:
        - list
        - watch
      - apiGroups:
        - couchbase.com
        resources:
        - couchbasebackuprestores
        verbs:
        - list
        - watch
        - delete
      - apiGroups:
        - ""
        resources:
        - configmaps
        verbs:
        - get
        - create
        - update
      - apiGroups:
        - ""
        resources:
        - pods
        - services
        - persistentvolumeclaims
        verbs:
        - get
        - list
        - watch
        - create
        - update
        - delete
      - apiGroups:
        - ""
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - ""
        resources:
        - events
        verbs:
        - list
        - create
        - update
      - apiGroups:
        - ""
        resources:
        - secrets
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - get
        - create
        - delete
        - list
        - watch
  - name: couchbase-operator-rolebinding
    singleton: true
    template:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: couchbase-operator
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: couchbase-operator
      subjects:
      - kind: ServiceAccount
        name: couchbase-operator
        namespace: default
  - name: couchbase-operator-deployment
    singleton: true
    template:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: couchbase-operator
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: couchbase-operator
        template:
          metadata:
            labels:
              app: couchbase-operator
          spec:
            containers:
            - name: couchbase-operator
              image: couchbase/couchbase-operator:v1
              args:
              - --pod-create-timeout=10m
              command:
              - couchbase-operator
              env:
              - name: WATCH_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: POD_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              ports:
              - containerPort: 8080
                name: http
              - containerPort: 8383
                name: prometheus
            serviceAccountName: couchbase-operator
  - name: couchbase-secret
    template:
      apiVersion: v1
      kind: Secret
      metadata: {}
      data:
        username: QWRtaW5pc3RyYXRvcg==
    parameters:
    - name: name
      source:
        metadata: id
        prefix: "instance-"
      destination:
        paths:
        - /metadata/name
    - name: password
      required: true
      source:
        parameter:
          path: /password
      destination:
        paths:
        - /data/password
  - name: couchbase-developer-private
    template:
      apiVersion: couchbase.com/v2
      kind: CouchbaseCluster
      metadata: {}
      spec:
        security: {}
        buckets:
          managed: true
          selector:
            matchLabels: {}
        servers:
        - name: default
          services:
          - data
          - index
          - query
    parameters:
    - name: name
      source:
        metadata: id
        prefix: "instance-"
      destination:
        paths:
        - /metadata/name
        - /spec/security/adminSecret
        - /spec/buckets/selector/matchLabels/cluster
    - name: image
      source:
        parameter:
          path: /image
          default:
            string: couchbase/server:enterprise-6.0.1
      destination:
        paths:
        - /spec/image
    - name: size
      source:
        parameter:
          path: /size
          default:
            int: 3
      destination:
        paths:
        - /spec/servers/0/size
  - name: couchbase-bucket
    template:
      apiVersion: couchbase.com/v2
      kind: CouchbaseBucket
      metadata: {}
      spec:
        memoryQuota: 256
        replicas: 1
        ioPriority: high
        evictionPolicy: valueOnly
        conflictResolution: seqno
    parameters:
    - name: name
      source:
        metadata: id
      destination:
        paths:
        - /metadata/name
  # Bindings bind templates to service plans.  These allow the specification of
  # exactly what templates are created when a plan is instantiated or bound to.
  bindings:
  - name: couchbase-developer-private
    service: couchbase-developer
    plan: couchbase-developer-private
    serviceInstance:
      templates:
      - couchbase-operator-serviceaccount
      - couchbase-operator-role
      - couchbase-operator-rolebinding
      - couchbase-operator-deployment
      - couchbase-secret
      - couchbase-developer-private
    serviceBinding:
      templates:
      - couchbase-bucket
---
# Main Broker deployment.  This is reentrant so should be able to be scaled
# horizontally for HA.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: couchbase-service-broker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: couchbase-service-broker
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: couchbase-service-broker
    spec:
      containers:
      - args:
        - --logtostderr
        - --stderrthreshold
        - "0"
        - --token
        - /var/run/secrets/couchbase.com/couchbase-service-broker/token
        - --tls-certificate
        - /var/run/secrets/couchbase.com/couchbase-service-broker/tls-certificate
        - --tls-private-key
        - /var/run/secrets/couchbase.com/couchbase-service-broker/tls-private-key
        command:
        - /usr/local/bin/broker
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: couchbase/service-broker:0.1.0
        name: couchbase-service-broker
        ports:
        - containerPort: 8443
          name: https
        readinessProbe:
          failureThreshold: 20
          httpGet:
            path: /readyz
            scheme: HTTPS
            port: https
          initialDelaySeconds: 3
          periodSeconds: 10
        volumeMounts:
        - mountPath: /var/run/secrets/couchbase.com/couchbase-service-broker
          name: couchbase-service-broker
          readOnly: true
      serviceAccountName: couchbase-service-broker
      volumes:
      - name: couchbase-service-broker
        secret:
          secretName: couchbase-service-broker
---
# The Broker is exposed to the Service Catalog with a Service.
apiVersion: v1
kind: Service
metadata:
  name: couchbase-service-broker
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    app: couchbase-service-broker
